---
- name: Set CockroachDB connection variables
  ansible.builtin.set_fact:
    cockroach_host: localhost
    cockroach_port: 26257
    cockroach_user: root
    cockroach_ssl_mode: disable
    test_db: cockroachdb_privilege_testdb
    test_user: cockroachdb_privilege_user

- name: Create test objects
  block:
    - name: Drop test database
      cockroach_labs.cockroachdb.cockroachdb_db:
        name: "{{ test_db }}"
        state: absent
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: root
        ssl_mode: "{{ cockroach_ssl_mode }}"
      ignore_errors: true
    - name: Create test database
      cockroach_labs.cockroachdb.cockroachdb_db:
        name: "{{ test_db }}"
        state: present
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: root
        ssl_mode: "{{ cockroach_ssl_mode }}"
      ignore_errors: true
    - name: Drop test user
      cockroach_labs.cockroachdb.cockroachdb_user:
        name: "{{ test_user }}"
        state: absent
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        login_user: root
        ssl_mode: "{{ cockroach_ssl_mode }}"
      ignore_errors: true
    - name: Create test user
      cockroach_labs.cockroachdb.cockroachdb_user:
        name: "{{ test_user }}"
        state: present
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        login_user: root
        ssl_mode: "{{ cockroach_ssl_mode }}"

- name: Test basic database-level privilege idempotency
  block:
    - name: Grant privileges to test user
      cockroachdb_privilege:
        state: grant
        privileges:
          - ALL
        on_type: database
        object_name: "{{ test_db }}"
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: localhost
        port: 26257
        user: root
        ssl_mode: disable
      register: priv_result

    - name: Verify privilege grant
      ansible.builtin.assert:
        that:
          - priv_result is changed
        fail_msg: "Initial database privilege grant failed"

    - name: Run the same grant command again (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - ALL
        on_type: database
        object_name: "{{ test_db }}"
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: localhost
        port: 26257
        user: root
        ssl_mode: disable
      register: priv_idempotent_result

    - name: Verify privilege idempotency
      ansible.builtin.assert:
        that:
          - priv_idempotent_result is not changed
        fail_msg: "Database privilege idempotency check failed"

- name: Test table-level privilege idempotency with individual privileges
  block:
    - name: Create a test table for privilege testing
      cockroachdb_table:
        database: "{{ test_db }}"
        name: test_priv_table
        state: present
        columns:
          - name: id
            type: UUID
            primary_key: true
            default: gen_random_uuid()
          - name: name
            type: STRING
          - name: email
            type: STRING
          - name: age
            type: INT
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: table_created

    - name: Verify table creation
      ansible.builtin.assert:
        that:
          - table_created is changed
        fail_msg: "Table creation failed"

    - name: Grant specific privileges to test user
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
          - INSERT
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: specific_priv_result

    - name: Verify specific privilege grant
      ansible.builtin.assert:
        that:
          - specific_priv_result is changed
        fail_msg: "Table-specific privilege grant failed"

    - name: Run the same specific privilege grant again (idempotency check) with debug
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
          - INSERT
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: specific_priv_idempotent

    - name: Display current privileges
      debug:
        var: specific_priv_idempotent

    - name: Verify specific privilege idempotency
      ansible.builtin.assert:
        that:
          - specific_priv_idempotent is not changed
        fail_msg: "Table-specific privilege idempotency check failed"

- name: Test privilege idempotency with grant option
  block:
    - name: Grant privileges with grant option
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        with_grant_option: true
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: grant_option_result

    - name: Verify grant option privilege change
      ansible.builtin.assert:
        that:
          - grant_option_result is changed
        fail_msg: "Grant option privilege failed"

    - name: Run the same grant option privilege again (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        with_grant_option: true
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: grant_option_idempotent

    - name: Verify grant option privilege idempotency
      ansible.builtin.assert:
        that:
          - grant_option_idempotent is not changed
        fail_msg: "Grant option privilege idempotency check failed"

- name: Test UPDATE privilege on a table
  block:
    - name: Grant UPDATE privilege
      cockroachdb_privilege:
        state: grant
        privileges:
          - UPDATE
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: update_priv_result

    - name: Verify UPDATE privilege grant
      ansible.builtin.assert:
        that:
          - update_priv_result is changed
        fail_msg: "UPDATE privilege grant failed"

    - name: Run the same UPDATE privilege grant again (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - UPDATE
        on_type: table
        object_name: test_priv_table
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: update_priv_idempotent

    - name: Verify UPDATE privilege idempotency
      ansible.builtin.assert:
        that:
          - update_priv_idempotent is not changed
        fail_msg: "UPDATE privilege idempotency check failed"

- name: Test sequence privilege idempotency
  block:
    - name: Create a test sequence
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "CREATE SEQUENCE IF NOT EXISTS test_sequence"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: sequence_result

    # Debug query to check what privileges look like directly from the database
    - name: Debug sequence privileges
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SEQUENCE test_sequence"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: raw_sequence_privs

    - name: Debug raw sequence privileges
      debug:
        var: raw_sequence_privs
        verbosity: 0

    - name: Grant sequence privileges
      cockroachdb_privilege:
        state: grant
        privileges:
          - USAGE
          - UPDATE
        on_type: sequence
        object_name: test_sequence
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: seq_priv_result

    - name: Verify sequence privilege grant
      ansible.builtin.assert:
        that:
          - seq_priv_result is changed
        fail_msg: "Sequence privilege grant failed"

    # Debug query to check privileges after first grant
    - name: Debug sequence privileges after first grant
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SEQUENCE test_sequence"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: after_grant_privs

    - name: Debug sequence privileges after first grant
      debug:
        var: after_grant_privs
        verbosity: 0

    - name: Run the same sequence privilege grant again (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - USAGE
          - UPDATE
        on_type: sequence
        object_name: test_sequence
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: seq_priv_idempotent

    # Debug query to check privileges after second grant
    - name: Debug sequence privileges after second grant
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SEQUENCE test_sequence"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: after_second_grant_privs

    - name: Debug sequence privileges after second grant
      debug:
        var: after_second_grant_privs
        verbosity: 0

    - name: Debug sequence idempotent task result
      debug:
        var: seq_priv_idempotent
        verbosity: 0

    - name: Verify sequence privilege idempotency
      ansible.builtin.assert:
        that:
          - seq_priv_idempotent is not changed
        fail_msg: "Sequence privilege idempotency check failed"

- name: Test schema privilege idempotency
  block:
    - name: Create a test schema
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "CREATE SCHEMA IF NOT EXISTS test_schema"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: schema_result

    - name: Grant schema privileges
      cockroachdb_privilege:
        state: grant
        privileges:
          - CREATE
          - USAGE
        on_type: schema
        object_name: test_schema
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: schema_priv_result

    - name: Verify schema privilege grant
      ansible.builtin.assert:
        that:
          - schema_priv_result is changed
        fail_msg: "Schema privilege grant failed"

    - name: Debug schema privileges after first grant
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SCHEMA test_schema"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: after_schema_grant_privs

    - name: Debug schema privileges after first grant
      debug:
        var: after_schema_grant_privs

    - name: Run the same schema privilege grant again (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - CREATE
          - USAGE
        on_type: schema
        object_name: test_schema
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: schema_priv_idempotent

    - name: Debug schema privileges after second grant
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SCHEMA test_schema"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: after_schema_second_grant_privs

    - name: Debug schema privileges after second grant
      debug:
        var: after_schema_second_grant_privs

    - name: Debug schema idempotent task result
      debug:
        var: schema_priv_idempotent

    - name: Debug schema privileges after second grant
      cockroachdb_query:
        database: "{{ test_db }}"
        query: "SHOW GRANTS ON SCHEMA test_schema"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: after_schema_second_grant_privs

    - name: Debug schema privileges after second grant
      debug:
        var: after_schema_second_grant_privs

    - name: Display details about schema privileges for debugging
      debug:
        msg:
          - "Schema priv changed status: {{ schema_priv_idempotent.changed | default('unknown') }}"
          - "Schema grants from database: {{ after_schema_second_grant_privs.query_result | default([]) }}"

    - name: Verify schema privilege idempotency
      ansible.builtin.assert:
        that:
          - schema_priv_idempotent is not changed
        fail_msg: "Schema privilege idempotency check failed"

- name: Test all-to-individual equivalence idempotency
  block:
    - name: Create a test table for ALL privilege testing
      cockroachdb_table:
        database: "{{ test_db }}"
        name: all_priv_test
        state: present
        columns:
          - name: id
            type: UUID
            primary_key: true
            default: gen_random_uuid()
          - name: data
            type: STRING
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: all_table_created

    - name: Grant ALL privileges
      cockroachdb_privilege:
        state: grant
        privileges:
          - ALL
        on_type: table
        object_name: all_priv_test
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: all_priv_result

    - name: Verify ALL privilege grant
      ansible.builtin.assert:
        that:
          - all_priv_result is changed
        fail_msg: "ALL privilege grant failed"

    - name: Grant individual privileges that should be equivalent to ALL (idempotency check)
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
          - INSERT
          - UPDATE
          - DELETE
        on_type: table
        object_name: all_priv_test
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: individual_priv_idempotent

    - name: Verify individual privilege idempotency when ALL is already granted
      ansible.builtin.assert:
        that:
          - individual_priv_idempotent is not changed
        fail_msg: "Individual privilege idempotency check failed when ALL was already granted"

- name: Test revoke privilege idempotency
  block:
    - name: Create a test table for revoke testing
      cockroachdb_table:
        database: "{{ test_db }}"
        name: revoke_test
        state: present
        columns:
          - name: id
            type: UUID
            primary_key: true
            default: gen_random_uuid()
          - name: notes
            type: STRING
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: revoke_table_created

    - name: Grant privileges to revoke
      cockroachdb_privilege:
        state: grant
        privileges:
          - SELECT
          - INSERT
        on_type: table
        object_name: revoke_test
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: setup_revoke_privs

    - name: Revoke SELECT privilege
      cockroachdb_privilege:
        state: revoke
        privileges:
          - SELECT
        on_type: table
        object_name: revoke_test
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: revoke_priv_result

    - name: Verify revoke operation
      ansible.builtin.assert:
        that:
          - revoke_priv_result is changed
        fail_msg: "Privilege revoke failed"

    - name: Run the same revoke operation again (idempotency check)
      cockroachdb_privilege:
        state: revoke
        privileges:
          - SELECT
        on_type: table
        object_name: revoke_test
        schema: public
        database: "{{ test_db }}"
        roles:
          - "{{ test_user }}"
        host: "{{ cockroach_host }}"
        port: "{{ cockroach_port }}"
        user: "{{ cockroach_user }}"
        ssl_mode: "{{ cockroach_ssl_mode }}"
      register: revoke_priv_idempotent

    - name: Verify revoke privilege idempotency
      ansible.builtin.assert:
        that:
          - revoke_priv_idempotent is not changed
        fail_msg: "Revoke privilege idempotency check failed"
